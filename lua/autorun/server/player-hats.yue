unless file.Exists( "player-hats.json", "DATA" )
    file.Write( "player-hats.json", util.TableToJSON( {
        "example-hat": {
            "model": "models/player/items/humans/top_hat.mdl",
            "attachment": "eyes",
            "offset": {
                "x": 0,
                "y": 0,
                "z": 0
            },
            "angles": {
                "p": 0,
                "y": 0,
                "r": 0
            },
            "conditions": {
                "activeweapon": "weapon_crowbar",
            }
        }
    }, true ) )

import isstring, isnumber, istable, Vector, Color, Angle, pairs from _G
import Clamp, floor from math

hats, length = {}, 0

loadHats = ->
    content = file.Read( "player-hats.json", "DATA" )
    unless content
        error( "Failed to load player-hats.json" )

    json = util.JSONToTable( content )
    unless json
        error( "Failed to parse player-hats.json" )

    table.Empty( hats )
    length = 0

    for name, data in pairs( json )
        unless isstring( name )
            print "[PlayerHats] Invalid hat name: #{name}"
            continue

        hatData = { :name }

        unless isstring( data.model )
            print "[PlayerHats] Invalid hat model: #{data.model}"
            continue

        hatData.model = data.model

        :offset = data
        if offset
            hatData.offset = Vector( offset.x or 0, offset.y or 0, offset.z or 0 )

        :angles = data
        if angles
            hatData.angles = Angle( angles.p or 0, angles.y or 0, angles.r or 0 )

        :color = data
        if color
            hatData.color = Color( color.red or color.r or 255, color.green or color.g or 255, color.blue or color.b or 255 )

        :skin = data
        if isnumber( skin )
            if skin < 0
                skin = 0

            hatData.skin = skin

        :bodygroups = data
        if isstring( bodygroups )
            hatData.bodygroups = bodygroups

        :alpha = data
        if isnumber( alpha )
            hatData.alpha = Clamp( alpha, 0, 1 )

        :scale = data
        if isnumber( scale )
            hatData.scale = Clamp( scale, 0, 128 )

        :effects = data
        if isnumber( effects )
            hatData.effects = floor( effects )

        :conditions = data
        if istable( conditions )
            lst, len = {}, 0
            for name, value in pairs( conditions )
                unless isstring( name )
                    continue

                if istable( value )
                    for val in *value
                        unless isstring( value )
                            continue

                        len += 1
                        lst[ len ] = { name, val }

                elseif isstring( value )
                    len += 1

                    if name == "playercolor" or name == "weaponcolor"
                        lst[ len ] = { name, Vector( value ) }
                    else
                        lst[ len ] = { name, value }

            hatData.conditions = lst

        :material = data
        if isstring( material )
            hatData.material = material

        :attachment = data
        if isstring( attachment )
            hatData.attachment = attachment

        :bone = data
        if isstring( bone )
            hatData.bone = bone

        :allow_player_color = data
        if allow_player_color ~= nil
            hatData.allow_player_color = allow_player_color ~= false

        :allow_shadow = data
        if allow_shadow ~= nil
            hatData.allow_shadow = allow_shadow ~= false

        length += 1
        hats[ length ] = hatData

    print "[PlayerHats] Loaded " .. length .. " hats."

util.AddNetworkString "Player Hats - Sync"
players = {}

hook.Add "PlayerDisconnected", "PlayerHats - PlayerDisconnected", ( ply ) ->
    players[ ply ] = nil

sendHats = ( ply ) ->
    net.Start( "Player Hats - Sync" )
    net.WriteTable( hats, true )
    net.Send( ply )
    return


hook.Add "SetupMove", "PlayerHats - SetupMove", ( ply, _, cmd ) ->
    if players[ ply ] or not ( cmd\IsForced! or ply\IsBot! )
        return

    players[ ply ] = true
    sendHats( ply )
    return

broadcastHats = ->
    for _, ply in player.Iterator!
        unless ply\IsBot!
            sendHats( ply )

concommand.Add "player_hats_reload", ( ply ) ->
    if ply and ply\IsValid! and not ( ply\IsSuperAdmin! or ply\IsListenServerHost! )
        ply\ChatPrint "You do not have permission to use this command."
        return

    loadHats!
    broadcastHats!
    return

timer.Simple 0.5, ->
    loadHats!
    broadcastHats!
    return
